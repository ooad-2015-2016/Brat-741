U ovom tekstu analiziramo da li je dijagram klase Špijunska Agencija ispunio SOLID principe.

**1. Single Responsibility Principle:**
    Princip pojedinačne odgovornosti je za sve klase ispunjen, budući da sve klase sadrže samo metode i parametre koje su im potrebne 
  za neometano funckioniranje, i jer se nalazimo u još ranoj fazi razvoja, tj analize, gdje većina klasa još uvijek nije sastavljena 
  tako da implementira funkcionalnosti kao što su: komuniciranje sa bazom podataka, pozivanje metoda drugih klasa, kreiranje nekih file-ova i slično. Što znači da sve klase imaju samo jedan razlog za promjenu.
  
  Naravno ono o čemu treba voditi računa u daljnjim fazama razvoje jeste očuvanje upravo ovog principa, kako bi sami sebi olakšali posao.
**2. Open-Closed Principle:**
    Otvoreno-zatvoreni princip zasad nije narušen, jer posmatramo manje-više finalni oblik dijagrama klasa. Međutim, obratimo pažnju na
  moguću ranjivu tačku, kao što je naprimjer funkcija analizirajOpremu() u klasi Menadžer. Naime, pretpostavimo da smo dobili zahtjev da
  proširimo klasu Oprema na više vrsta opreme, tipa vojna oprema (oružja, koja dalje mogu biti podijeljena na velikog i malog kalibra),
  vozila (koja opet dalje mogu biti podijeljena na zračna, kopnena i vodena), generalna logistika itd. Brzi popravak ovakvog problema bi
  npr. uzrokovao da pravimo if uslov u funkciji analizirajOpremu, i taj if uslov bi postajao sve veći i veći kako se zahtjevi za
  proširenje klase Oprema budu gomilali. To znači da ova funkcija ipak nije zatvorena na modifikaciju, jer bismo je svaki put morali
  modifikovati nadogradnjom klase Oprema. Trajno rješenje ovog problema bi bilo da, primjera radi, klase izvedene iz klase Oprema imaju
  vlastite funkcije za generiranje izvještaja o opremi, dok bi funkcija analizirajOpremu() samo vršila interakciju s tim generiranim
  izvještajem, i tako bi postala otvorena na nadogradnju, a zatvorena na modifikaciju, tj. postala bi "otporna/imuna" na izvršene
  promjene u drugim klasama.
**3. Liskov Substitution Principle:**

**4. Interface Segregation Principle:**

**5. Dependency Inversion Principle:**
